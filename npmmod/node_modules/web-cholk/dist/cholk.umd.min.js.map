{"version":3,"file":"cholk.umd.min.js","sources":["../src/utils/styles.ts","../src/utils/appendStyle.ts","../src/utils/applyParams.ts","../src/utils/customColors.ts","../src/utils/isTypeof.ts","../src/utils/generateValues.ts","../src/utils/handleStyleValue.ts","../src/utils/handleAffix.ts","../src/utils/handlePresetCall.ts","../src/utils/handleLogValue.ts","../src/cholk.ts","../src/utils/resetStyle.ts","../src/utils/customStyles.ts","../src/utils/customPreset.ts"],"sourcesContent":["import { CholkCssValue, CholkPresetCollection, CholkStyleCollection } from \"../../types\"\r\n\r\nconst STYLE: CholkStyleCollection = {\r\n  bold: 'font-weight: bold;',\r\n  italic: 'font-style: italic;',\r\n  underline: 'text-decoration: underline;',\r\n  nil: ';',\r\n  gap: 'margin-left: 0.5em;',\r\n}\r\nconst PRESET: CholkPresetCollection = {}\r\nlet BASESTYLE: CholkCssValue = ''\r\n\r\nexport default {\r\n  STYLE,\r\n  PRESET,\r\n  BASESTYLE,\r\n}","import { CholkAffix, CholkCssValue, CholkInastace } from '../../types'\r\nimport STYLES from './styles'\r\n\r\nexport default function appendStyle(target: CholkInastace | CholkAffix, style: CholkCssValue) {\r\n  if (style.endsWith(';')) {\r\n    const template = target._template\r\n    const params = target._params\r\n    if (template.endsWith('%c')) {\r\n      params[params.length - 1] += style\r\n    } else {\r\n      target._template += '%c'\r\n      params.push(STYLES.BASESTYLE + style)\r\n    }\r\n  }\r\n}\r\n","import { CholkAffix, CholkInastace } from '../../types'\r\nimport appendStyle from './appendStyle'\r\nimport STYLES from './styles'\r\n\r\nexport default function applyParams(target: CholkInastace | CholkAffix, args: any[]) {\r\n  let template = ''\r\n  let params = []\r\n  for (let i of args) {\r\n    if (typeof i === 'string') {\r\n      template += '%s'\r\n    } else {\r\n      template += '%o'\r\n    }\r\n    params.push(i)\r\n  }\r\n  if (STYLES.BASESTYLE && !target._template) {\r\n    appendStyle(target, ';')\r\n  }\r\n  target._template += template\r\n  target._params.push(...params)\r\n}\r\n","import { CholkColorConfig, CholkStyleCollection } from \"../../types\"\r\n\r\nexport default function customColors(STYLE: CholkStyleCollection, colors: CholkColorConfig) {\r\n  for (let key in colors) {\r\n    const value = colors[key]\r\n    STYLE[key] = `color: ${value};`\r\n    STYLE[\r\n      `bg${key.slice(0, 1).toUpperCase()}${key.slice(1)}`\r\n    ] = `background-color: ${value};`\r\n  }\r\n}\r\n","export default function isTypeof(target: any, typeName: string) {\r\n  return Object.prototype.toString.call(target).slice(8, -1) === typeName\r\n}\r\n","import { CholkInastace } from \"../../types\"\r\n\r\n/**\r\n * generateValues\r\n * 生成模板字符串\r\n * @param {object} cholk\r\n */\r\nexport default function generateValues(cholk: CholkInastace) {\r\n  let tmpl = cholk._template\r\n  let params = [...cholk._params]\r\n  const { _template: preTmpl = '', _params: preParams = [] } = cholk._prefix\r\n  const { _template: sufTmpl = '', _params: sufParams = [] } = cholk._suffix\r\n\r\n  // preTmpl could be one of %c、%c%s、%s\r\n  if (preTmpl === '%c' && tmpl.startsWith('%c')) {\r\n    // only style\r\n    params[0] = preParams[0] + params[0]\r\n  } else {\r\n    tmpl = preTmpl + tmpl\r\n    params = [...preParams, ...params]\r\n  }\r\n\r\n  // sufTmpl could be one of %c、%c%s、%s\r\n  if (tmpl.endsWith('%c') && sufTmpl.startsWith('%c')) {\r\n    if (sufTmpl === '%c') {\r\n      params[params.length - 1] = params[params.length - 1] + sufParams[0]\r\n    } else if (sufTmpl === '%c%s') {\r\n      tmpl = tmpl + '%s'\r\n      const lastParam = params.pop()\r\n      sufParams[0] = lastParam + sufParams[0]\r\n      params = [...params, ...sufParams]\r\n    }\r\n  } else {\r\n    tmpl += sufTmpl\r\n    params = [...params, ...sufParams]\r\n  }\r\n\r\n  return [tmpl, ...params]\r\n}\r\n","import { CholkPresetCssValue } from \"../../types\"\r\nimport isTypeof from \"./isTypeof\"\r\nimport STYLES from './styles'\r\n\r\n/**\r\n * handleStyleValue\r\n * @param {string|string[]} value - colorName | styleName | cssValue | [colorName | styleName | cssValue, ...]\r\n * @returns {string}\r\n */\r\nexport default function handleStyleValue(value?: CholkPresetCssValue) {\r\n  if (!value) return ''\r\n  if (typeof value === 'string') {\r\n    value = [value]\r\n  }\r\n  if (!isTypeof(value, 'Array')) {\r\n    console.error('StyleValue should be String or Array')\r\n    return ''\r\n  }\r\n\r\n  const styles = []\r\n  for (let key of value) {\r\n    if (typeof key === 'string') {\r\n      if (key in STYLES.STYLE) {\r\n        styles.push(STYLES.STYLE[key])\r\n      } else {\r\n        if (!key.endsWith(';')) {\r\n          key += ';'\r\n        }\r\n        styles.push(key)\r\n      }\r\n    }\r\n  }\r\n\r\n  return styles.join('')\r\n}\r\n","import { CholkPresetConfig } from '../../types'\r\nimport appendStyle from './appendStyle'\r\nimport applyParams from './applyParams'\r\nimport handleStyleValue from './handleStyleValue'\r\nimport isTypeof from './isTypeof'\r\n\r\nexport default function handleAffix(affix: CholkPresetConfig = {}) {\r\n  const target = {\r\n    _template: '',\r\n    _params: [],\r\n  }\r\n  affix?.css && appendStyle(target, handleStyleValue(affix?.css))\r\n  affix?.log &&\r\n    applyParams(\r\n      target,\r\n      isTypeof(affix?.log, 'Array') ? affix?.log : [affix?.log]\r\n    )\r\n\r\n  return target\r\n}\r\n","import { CholkInastace, CholkPresetConfig } from '../../types'\r\nimport appendStyle from './appendStyle'\r\nimport handleLogValue from './handleLogValue'\r\nimport handleStyleValue from './handleStyleValue'\r\n\r\nexport default function handlePresetCall(target: CholkInastace, preset: CholkPresetConfig) {\r\n  const { css, log } = preset\r\n  appendStyle(target, handleStyleValue(css))\r\n  handleLogValue(target, log)\r\n}\r\n","import { CholkInastace, CholkPresetLogValue } from '../../types'\r\nimport isTypeof from './isTypeof'\r\n\r\nexport default function handleLogValue(target: CholkInastace, value: CholkPresetLogValue) {\r\n  target._presetLogger = function (...args) {\r\n    if (typeof value === 'undefined') return []\r\n\r\n    if (typeof value === 'function') {\r\n      value = value(...args)\r\n    }\r\n    if (isTypeof(value, 'Array')) {\r\n      return value\r\n    } else {\r\n      return [value]\r\n    }\r\n  }\r\n}\r\n","import STYLES from './utils/styles'\r\nimport appendStyle from './utils/appendStyle'\r\nimport applyParams from './utils/applyParams'\r\nimport customColors from './utils/customColors'\r\nimport customPreset from './utils/customPreset'\r\nimport customStyles from './utils/customStyles'\r\nimport generateValues from './utils/generateValues'\r\nimport handleAffix from './utils/handleAffix'\r\nimport handlePresetCall from './utils/handlePresetCall'\r\nimport handleStyleValue from './utils/handleStyleValue'\r\nimport resetStyle from './utils/resetStyle'\r\nimport { CholkConfig, CholkInastace, CholkSetting } from '../types'\r\n\r\nconst { STYLE, PRESET } = STYLES\r\n\r\ncustomColors(STYLE, {\r\n  blue: '#1890ff', // 蓝色\r\n  cyan: '#13c2c2', // 青色\r\n  gold: '#faad14', // 金色\r\n  green: '#52c41a', // 绿色\r\n  lime: '#a0d911', // 青柠\r\n  magenta: '#eb2f96', // 洋红\r\n  orange: '#fa8c16', // 橙色\r\n  pink: '#ffc0cb', // 粉色\r\n  purple: '#722ed1', // 紫色\r\n  red: '#f5222d', // 红色\r\n  white: '#fff', // 白色\r\n  yellow: '#fadb14', // 黄色\r\n  grey: '#5e5e5e', // 灰黑\r\n})\r\n\r\nconst proxyHandler: ProxyHandler<CholkInastace> = {\r\n  get: function (target, key, receiver) {\r\n    if (key === 'css') {\r\n      // redirect to function cholk.css()\r\n      return target.css\r\n    }\r\n\r\n    if (key === 'reset') {\r\n      resetStyle(target)\r\n      return receiver\r\n    }\r\n\r\n    if (key in PRESET) {\r\n      handlePresetCall(target, PRESET[key as string])\r\n      return target.presetHandler\r\n    }\r\n\r\n    if (key in STYLE) {\r\n      appendStyle(target, STYLE[key as string])\r\n      return receiver\r\n    }\r\n\r\n    return Reflect.get(target, key, receiver)\r\n  },\r\n  set: function () {\r\n    return false\r\n  },\r\n}\r\n\r\n/**\r\n * Cholk\r\n * @param {Object} setting\r\n * @param {Object} setting.prefix\r\n * @param {string|string[]} setting.prefix.css - colorName | styleName | cssValue | [colorName | styleName | cssValue, ...]\r\n * @param {string|string[]} setting.prefix.log - logValue | [logValue, ...]\r\n * @param {Object} setting.suffix\r\n * @param {string|string[]} setting.suffix.css - colorName | styleName | cssValue | [colorName | styleName | cssValue, ...]\r\n * @param {string|string[]} setting.suffix.log - logValue | [logValue, ...]\r\n * @returns proxyCholk\r\n *\r\n * setting: {\r\n *    prefix: {\r\n *        css: colorName | styleName | cssValue | [colorName | styleName | cssValue, ...],\r\n *        log: logValue | [logValue, ...]\r\n *      },\r\n *    suffix: {\r\n *        css: colorName | styleName | cssValue | [colorName | styleName | cssValue, ...],\r\n *        log: logValue | [logValue, ...]\r\n *      }\r\n * }\r\n */\r\nfunction Cholk(setting: CholkSetting = {}) {\r\n  let proxyCholk: CholkInastace\r\n\r\n  const cholk: CholkInastace = (...args) => {\r\n    applyParams(cholk, args)\r\n    return proxyCholk\r\n  }\r\n\r\n  cholk._template = ''\r\n  cholk._params = []\r\n  cholk._prefix = handleAffix(setting.prefix)\r\n  cholk._suffix = handleAffix(setting.suffix)\r\n  cholk._preset = function (...args) {\r\n    return []\r\n  }\r\n  cholk._presetLogger = cholk._preset\r\n\r\n  cholk.values = function () {\r\n    return generateValues(cholk)\r\n  }\r\n\r\n  /**\r\n   * css\r\n   * cholk.css('color: #aabbcc;').bgBlue('cholk')\r\n   * // => ['%c', 'color: #aabbcc;background-color: blue', 'cholk']\r\n   */\r\n  cholk.css = function (style) {\r\n    if (typeof style === 'string') {\r\n      appendStyle(cholk, style)\r\n    }\r\n    return proxyCholk\r\n  }\r\n\r\n  cholk.presetHandler = function (...args) {\r\n    const value = cholk._presetLogger(...args)\r\n    // restore _presetLogger\r\n    cholk._presetLogger = cholk._preset\r\n    // apply preset\r\n    return cholk(...value)\r\n  }\r\n\r\n  cholk[Symbol.iterator] = function* () {\r\n    yield* generateValues(cholk)\r\n    cholk._template = ''\r\n    cholk._params = []\r\n  }\r\n\r\n  proxyCholk = new Proxy<CholkInastace>(cholk, proxyHandler)\r\n  return proxyCholk\r\n}\r\n\r\n/**\r\n * Cholk.extend\r\n * @param {*} config\r\n *\r\n * config: {\r\n *    colors: {\r\n *      [colorName]: colorValue  // accept css color value\r\n *    },\r\n *    styles: {\r\n *      [styleName]: cssValue // css rules\r\n *    },\r\n *    baseStyle: colorName | styleName | cssValue | [colorName | styleName | cssValue, ...]\r\n *    preset: {\r\n *      [funcName]: {\r\n *        css: colorName | styleName | cssValue | [colorName | styleName | cssValue, ...],\r\n *        log: logValue | [logValue, ...] | (...args) => logValue\r\n *      }\r\n *    },\r\n * }\r\n */\r\nCholk.extend = function (config: CholkConfig = {}) {\r\n  const { colors = {}, styles = {}, preset = {}, baseStyle } = config\r\n  customColors(STYLE, colors)\r\n  customStyles(STYLE, styles)\r\n  customPreset(PRESET, preset)\r\n  if (typeof baseStyle !== 'undefined') {\r\n    STYLES.BASESTYLE = handleStyleValue(baseStyle)\r\n  }\r\n}\r\n\r\n/**\r\n * Cholk.styles\r\n * Cholk.getStyle\r\n * Cholk.getStyles\r\n * @returns list of available styles\r\n */\r\nCholk.styles =\r\n  Cholk.getStyle =\r\n  Cholk.getStyles =\r\n    function () {\r\n      return {\r\n        ...STYLE,\r\n      }\r\n    }\r\n\r\nexport default Cholk\r\n","import { CholkInastace } from \"../../types\"\r\n\r\nexport default function resetStyle(target: CholkInastace) {\r\n  const template = target._template\r\n  const params = target._params\r\n  if (template.endsWith('%c')) {\r\n    params[params.length - 1] = ';'\r\n  } else {\r\n    target._template += '%c'\r\n    params.push(';')\r\n  }\r\n}\r\n","import { CholkStyleCollection, CholkStyleConfig } from \"../../types\"\r\n\r\nexport default function customStyles(STYLE: CholkStyleCollection, styles: CholkStyleConfig) {\r\n  for (let key in styles) {\r\n    let value = `${styles[key]}`\r\n    if (!value.endsWith(';')) {\r\n      value += ';'\r\n    }\r\n    STYLE[key] = value\r\n  }\r\n}\r\n","import { CholkPresetCollection } from '../../types'\r\nimport isTypeof from './isTypeof'\r\n\r\nexport default function customPreset(\r\n  PRESET: CholkPresetCollection,\r\n  preset: CholkPresetCollection\r\n) {\r\n  if (!isTypeof(preset, 'Object')) {\r\n    console.error('config.preset should be Object')\r\n    return\r\n  }\r\n  for (let [funcName, config] of Object.entries(preset)) {\r\n    if (isTypeof(config, 'Object')) {\r\n      PRESET[funcName] = config\r\n    } else {\r\n      console.error(`config.preset.${funcName} should be Object`)\r\n    }\r\n  }\r\n}\r\n"],"names":["STYLES","bold","italic","underline","nil","gap","BASESTYLE","appendStyle","target","style","endsWith","template","_template","params","_params","length","push","applyParams","args","i","customColors","STYLE","colors","key","value","slice","toUpperCase","isTypeof","typeName","Object","prototype","toString","call","generateValues","cholk","tmpl","preTmpl","preParams","_prefix","sufTmpl","sufParams","_suffix","startsWith","lastParam","pop","handleStyleValue","console","error","styles","join","handleAffix","affix","css","log","handlePresetCall","preset","_presetLogger","handleLogValue","PRESET","blue","cyan","gold","green","lime","magenta","orange","pink","purple","red","white","yellow","grey","proxyHandler","get","receiver","resetStyle","presetHandler","Reflect","set","Cholk","setting","proxyCholk","prefix","suffix","_preset","values","Symbol","iterator","Proxy","extend","config","baseStyle","customStyles","funcName","entries","customPreset","getStyle","getStyles"],"mappings":"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"}
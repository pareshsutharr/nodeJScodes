import STYLES from './utils/styles.js';
import appendStyle from './utils/appendStyle.js';
import applyParams from './utils/applyParams.js';
import customColors from './utils/customColors.js';
import customPreset from './utils/customPreset.js';
import customStyles from './utils/customStyles.js';
import generateValues from './utils/generateValues.js';
import handleAffix from './utils/handleAffix.js';
import handlePresetCall from './utils/handlePresetCall.js';
import handleStyleValue from './utils/handleStyleValue.js';
import resetStyle from './utils/resetStyle.js';

const { STYLE, PRESET } = STYLES;
customColors(STYLE, {
    blue: '#1890ff',
    cyan: '#13c2c2',
    gold: '#faad14',
    green: '#52c41a',
    lime: '#a0d911',
    magenta: '#eb2f96',
    orange: '#fa8c16',
    pink: '#ffc0cb',
    purple: '#722ed1',
    red: '#f5222d',
    white: '#fff',
    yellow: '#fadb14',
    grey: '#5e5e5e', // 灰黑
});
const proxyHandler = {
    get: function (target, key, receiver) {
        if (key === 'css') {
            // redirect to function cholk.css()
            return target.css;
        }
        if (key === 'reset') {
            resetStyle(target);
            return receiver;
        }
        if (key in PRESET) {
            handlePresetCall(target, PRESET[key]);
            return target.presetHandler;
        }
        if (key in STYLE) {
            appendStyle(target, STYLE[key]);
            return receiver;
        }
        return Reflect.get(target, key, receiver);
    },
    set: function () {
        return false;
    },
};
/**
 * Cholk
 * @param {Object} setting
 * @param {Object} setting.prefix
 * @param {string|string[]} setting.prefix.css - colorName | styleName | cssValue | [colorName | styleName | cssValue, ...]
 * @param {string|string[]} setting.prefix.log - logValue | [logValue, ...]
 * @param {Object} setting.suffix
 * @param {string|string[]} setting.suffix.css - colorName | styleName | cssValue | [colorName | styleName | cssValue, ...]
 * @param {string|string[]} setting.suffix.log - logValue | [logValue, ...]
 * @returns proxyCholk
 *
 * setting: {
 *    prefix: {
 *        css: colorName | styleName | cssValue | [colorName | styleName | cssValue, ...],
 *        log: logValue | [logValue, ...]
 *      },
 *    suffix: {
 *        css: colorName | styleName | cssValue | [colorName | styleName | cssValue, ...],
 *        log: logValue | [logValue, ...]
 *      }
 * }
 */
function Cholk(setting = {}) {
    let proxyCholk;
    const cholk = (...args) => {
        applyParams(cholk, args);
        return proxyCholk;
    };
    cholk._template = '';
    cholk._params = [];
    cholk._prefix = handleAffix(setting.prefix);
    cholk._suffix = handleAffix(setting.suffix);
    cholk._preset = function (...args) {
        return [];
    };
    cholk._presetLogger = cholk._preset;
    cholk.values = function () {
        return generateValues(cholk);
    };
    /**
     * css
     * cholk.css('color: #aabbcc;').bgBlue('cholk')
     * // => ['%c', 'color: #aabbcc;background-color: blue', 'cholk']
     */
    cholk.css = function (style) {
        if (typeof style === 'string') {
            appendStyle(cholk, style);
        }
        return proxyCholk;
    };
    cholk.presetHandler = function (...args) {
        const value = cholk._presetLogger(...args);
        // restore _presetLogger
        cholk._presetLogger = cholk._preset;
        // apply preset
        return cholk(...value);
    };
    cholk[Symbol.iterator] = function* () {
        yield* generateValues(cholk);
        cholk._template = '';
        cholk._params = [];
    };
    proxyCholk = new Proxy(cholk, proxyHandler);
    return proxyCholk;
}
/**
 * Cholk.extend
 * @param {*} config
 *
 * config: {
 *    colors: {
 *      [colorName]: colorValue  // accept css color value
 *    },
 *    styles: {
 *      [styleName]: cssValue // css rules
 *    },
 *    baseStyle: colorName | styleName | cssValue | [colorName | styleName | cssValue, ...]
 *    preset: {
 *      [funcName]: {
 *        css: colorName | styleName | cssValue | [colorName | styleName | cssValue, ...],
 *        log: logValue | [logValue, ...] | (...args) => logValue
 *      }
 *    },
 * }
 */
Cholk.extend = function (config = {}) {
    const { colors = {}, styles = {}, preset = {}, baseStyle } = config;
    customColors(STYLE, colors);
    customStyles(STYLE, styles);
    customPreset(PRESET, preset);
    if (typeof baseStyle !== 'undefined') {
        STYLES.BASESTYLE = handleStyleValue(baseStyle);
    }
};
/**
 * Cholk.styles
 * Cholk.getStyle
 * Cholk.getStyles
 * @returns list of available styles
 */
Cholk.styles =
    Cholk.getStyle =
        Cholk.getStyles =
            function () {
                return {
                    ...STYLE,
                };
            };

export { Cholk as default };
